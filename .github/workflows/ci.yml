name: Search API Pantheon
on:
  # While the TERMINUS_ENV is hardcoded, it seems like a bad idea to have builds running simultaneously (push and pull_request)
  # push:
  pull_request:
  repository_dispatch:
  schedule:
    - cron: '0 0 * * *'
jobs:
  # Checkout in separate job because docker image is alpine based and checkout action doesn't work.
  build_test:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pantheon-public/build-tools-ci:7.4.x
      options: --user root
    name: Build and test
    env:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
      TERM: dumb
      # @todo, change to a terminus token managed by someone within Eng.
      TERMINUS_TOKEN: ${{ secrets.TERMINUS_TOKEN }}
      TERMINUS_TOKEN_2: ${{ secrets.TERMINUS_TOKEN_2 }}
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
      # @todo, change to a different site
      TERMINUS_SITE: "stevector-solr-umami"
      # @todo, change to different site
      # Once it is possible to enable Solr8 via pantheon.yml then this step should be the creation of a new multidev, not the reseting of an existing one
      TERMINUS_ENV: "docs-check"
      # @todo recompute this variable once TERMINUS_ENV is not hard-coded.
      SITE_ENV: "stevector-solr-umami.docs-check"
      COMMIT_SHA: ${{ github.sha }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      BASH_ENV: ~/.bashrc
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login
        run: |
          mkdir -p /root/.ssh && echo "StrictHostKeyChecking no" >> "/root/.ssh/config"
          terminus auth:login --machine-token=$TERMINUS_TOKEN_2 -vvv

      - name: Set up new multidev
        run: |
          echo "TODO - once it is possible to enable Solr8 via pantheon.yml then this step should be the creation of a new multidev, not the reseting of an existing one."
          echo "rather than cloning the db, it might be better to 'drush si'"
          terminus env:clone-content $TERMINUS_SITE.dev $TERMINUS_ENV --yes --cc

      ### These steps should move below the code sniff once the code sniff is passing.  
      - name: Composer Require this commit of this module
        run: |
          echo "TODO - there has to be a cleaner way to set this private key."
          echo "$SSH_PRIVATE_KEY" > ../private.key
          chmod 600 ../private.key
          eval `ssh-agent -s`
          ssh-add ../private.key
          echo "Switch into SFTP mode so that composer.json can be changed"
          terminus connection:set $SITE_ENV sftp
          echo "TODO - make this composer require statment more specific. See https://github.com/pantheon-systems/search_api_pantheon/blob/2bc0c1b44eed44671457fb1fa0afedcd40392183/.circleci/setup-d8-repo.sh#L13"
          terminus composer $SITE_ENV -- require pantheon-systems/search_api_pantheon ^8 --prefer-dist
          echo "Enable modules"
          terminus drush $SITE_ENV -- en -y search_api_pantheon search_api_pantheon_admin

          echo "TODO - commit sftp changes"
          echo "TODO - switch into git mode"

      - name: List modules for debugging
        run: |
          terminus drush $SITE_ENV -- pml

      - name: Configure Search API Pantheon (either through drush or browser simulation)
        run: |
          echo "TODO"

      - name: Index the content (probably with drush)
        run: |
          echo "TODO"

      - name: Test that searching works (through browser simulation)
        run: |
          echo "TODO"




 #     - name: Composer install
 #       run: composer install --ignore-platform-req=php

   #   - name: render-md-mermaid
    #    uses: nielsvaneck/render-md-mermaid@v2

    #  - name: Code sniff
    #    run: composer run-script code:lint


#      - name: Tests
#        run: |
#          export TERMINUS_ENV=$GITHUB_RUN_NUMBER
#          export SITE_ENV=$TERMINUS_SITE.$TERMINUS_ENV
#          echo "$SSH_PRIVATE_KEY" > ../private.key
#          chmod 600 ../private.key
#          eval `ssh-agent -s`
#          ssh-add ../private.key
#          if [ -n "$( echo $GITHUB_REF | sed -n '/heads/p')" ] ; then
#            BRANCH=`echo $GITHUB_REF | cut -c12-`
#            export GIT_REF="dev-${BRANCH}#${COMMIT_SHA}"
#          else
#            TAG=`echo $GITHUB_REF | cut -c11-`
#            export GIT_REF=${TAG}
#          fi
#          cd .ci
#          ./create-fresh-d8-site.sh
#          ./setup-d8-repo.sh
#          ./enable-modules.sh
#          ./verify-solr.sh
